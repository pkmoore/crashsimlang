
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNOPleft+-left*/AND ASSIGNOP EQUALSOP EVENT IDENTIFIER NOT NUM_LITERAL READOP RET STOREOP STRING_LITERAL WITH WRITEOPstatementlist : statement  statementlist\n    | statement\n    statement : preamblestatement\n    | bodystatement\n    preamblestatement : typedefinition \';\'\n    | variantdefinition \';\'\n    bodystatement : dataword \';\'\n    | registerassignment \';\'\n    typeexpression : IDENTIFIER \':\' IDENTIFIER \'@\' NUM_LITERAL\n    |  IDENTIFIER \':\' IDENTIFIER \'@\' RET\n    typeexpressionlist : typeexpression \',\' typeexpressionlist\n    | typeexpression\n    typedefinition : EVENT IDENTIFIER \'{\' typeexpressionlist \'}\'variantdefinition : EVENT IDENTIFIER variantlistvariantlist : variant \'|\' variantlist\n    | variant\n    variant : \'{\' IDENTIFIER typeexpressionlist \'}\'predpath : IDENTIFIER "." predpath\n    | IDENTIFIER\n    predexpressionlist : predexpression AND predexpressionlist\n    | predexpression\n    predexpression : predpath EQUALSOP NUM_LITERAL\n    | predpath EQUALSOP STRING_LITERAL\n    registerassignment : IDENTIFIER ASSIGNOP NUM_LITERAL\n    | IDENTIFIER ASSIGNOP STRING_LITERAL\n    | IDENTIFIER ASSIGNOP IDENTIFIER\n    | IDENTIFIER ASSIGNOP registerexp\n    registerexp : registeradd\n    | registersub\n    | registermul\n    | registerdiv\n    | registerconcat\n    | registeraddorconcat\n    registeraddorconcat : IDENTIFIER \'+\' IDENTIFIERregisterconcat : IDENTIFIER \'+\' STRING_LITERAL\n    | STRING_LITERAL \'+\' IDENTIFIER\n    | STRING_LITERAL \'+\' STRING_LITERAL\n    registeradd : IDENTIFIER \'+\' NUM_LITERAL\n    | NUM_LITERAL \'+\' IDENTIFIER\n    | NUM_LITERAL \'+\' NUM_LITERAL\n    registersub : IDENTIFIER \'-\' IDENTIFIER\n    | IDENTIFIER \'-\' NUM_LITERAL\n    | NUM_LITERAL \'-\' IDENTIFIER\n    | NUM_LITERAL \'-\' NUM_LITERAL\n    registermul : IDENTIFIER \'*\' IDENTIFIER\n    | IDENTIFIER \'*\' NUM_LITERAL\n    | NUM_LITERAL \'*\' IDENTIFIER\n    | NUM_LITERAL \'*\' NUM_LITERAL\n    registerdiv : IDENTIFIER \'/\' IDENTIFIER\n    | IDENTIFIER \'/\' NUM_LITERAL\n    | NUM_LITERAL \'/\' IDENTIFIER\n    | NUM_LITERAL \'/\' NUM_LITERAL\n    empty :withexpression : WITH predexpressionlistoutputexpression : WRITEOP IDENTIFIER \'(\' parameterexpression \')\'withoutputexpression : empty\n    | withexpression\n    | outputexpression\n    | withexpression outputexpression\n    datawordidentifier : NOT IDENTIFIER\n    | IDENTIFIER\n    dataword : datawordidentifier \'(\' parameterexpression \')\' withoutputexpressionparameterexpression : \'{\' parameterlist \'}\'\n    | \'{\' \'}\'\n    parameterlist : parameter \',\' parameterlist\n    | parameter\n    parameter : IDENTIFIER \':\' READOP IDENTIFIER\n    | IDENTIFIER \':\' STOREOP  IDENTIFIER\n    | IDENTIFIER \':\' WRITEOP IDENTIFIER\n    | IDENTIFIER \':\' parameterexpression\n    '
    
_lr_action_items = {'EVENT':([0,2,3,4,14,15,16,17,],[9,9,-3,-4,-5,-6,-7,-8,]),'IDENTIFIER':([0,2,3,4,9,12,14,15,16,17,19,22,36,37,41,42,43,44,45,46,47,48,49,57,59,61,85,86,88,93,101,102,103,106,108,],[10,10,-3,-4,18,21,-5,-6,-7,-8,25,37,54,55,62,65,67,69,72,74,76,78,80,91,55,93,98,99,54,55,110,111,112,98,98,]),'NOT':([0,2,3,4,14,15,16,17,],[12,12,-3,-4,-5,-6,-7,-8,]),'$end':([1,2,3,4,13,14,15,16,17,],[0,-2,-3,-4,-1,-5,-6,-7,-8,]),';':([5,6,7,8,23,24,25,26,27,28,29,30,31,32,33,34,50,58,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,94,95,96,115,116,117,120,],[14,15,16,17,-14,-16,-26,-24,-25,-27,-28,-29,-30,-31,-32,-33,-53,-13,-15,-34,-38,-35,-41,-42,-45,-46,-49,-50,-40,-39,-44,-43,-48,-47,-52,-51,-37,-36,-62,-56,-57,-58,-17,-59,-54,-21,-20,-22,-23,-55,]),'ASSIGNOP':([10,],[19,]),'(':([10,11,21,99,],[-61,20,-60,109,]),'{':([18,20,40,89,109,],[22,36,61,36,36,]),'NUM_LITERAL':([19,41,42,43,44,45,46,47,48,105,107,],[26,63,66,68,70,71,73,75,77,113,116,]),'STRING_LITERAL':([19,41,49,107,],[27,64,79,117,]),'|':([24,90,],[40,-17,]),'+':([25,26,27,],[41,45,49,]),'-':([25,26,],[42,46,]),'*':([25,26,],[43,47,]),'/':([25,26,],[44,48,]),')':([35,52,87,119,],[50,-64,-63,120,]),'}':([36,38,39,51,52,53,56,87,92,100,104,110,111,112,113,114,],[52,58,-12,87,-64,-66,90,-63,-11,-65,-70,-67,-68,-69,-9,-10,]),':':([37,54,55,],[57,89,57,]),',':([39,52,53,87,104,110,111,112,113,114,],[59,-64,88,-63,-70,-67,-68,-69,-9,-10,]),'WITH':([50,],[85,]),'WRITEOP':([50,83,89,95,96,115,116,117,],[86,86,103,-54,-21,-20,-22,-23,]),'READOP':([89,],[101,]),'STOREOP':([89,],[102,]),'@':([91,],[105,]),'AND':([96,116,117,],[106,-22,-23,]),'EQUALSOP':([97,98,118,],[107,-19,-18,]),'.':([98,],[108,]),'RET':([105,],[114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statementlist':([0,2,],[1,13,]),'statement':([0,2,],[2,2,]),'preamblestatement':([0,2,],[3,3,]),'bodystatement':([0,2,],[4,4,]),'typedefinition':([0,2,],[5,5,]),'variantdefinition':([0,2,],[6,6,]),'dataword':([0,2,],[7,7,]),'registerassignment':([0,2,],[8,8,]),'datawordidentifier':([0,2,],[11,11,]),'variantlist':([18,40,],[23,60,]),'variant':([18,40,],[24,24,]),'registerexp':([19,],[28,]),'registeradd':([19,],[29,]),'registersub':([19,],[30,]),'registermul':([19,],[31,]),'registerdiv':([19,],[32,]),'registerconcat':([19,],[33,]),'registeraddorconcat':([19,],[34,]),'parameterexpression':([20,89,109,],[35,104,119,]),'typeexpressionlist':([22,37,59,93,],[38,56,92,56,]),'typeexpression':([22,37,59,93,],[39,39,39,39,]),'parameterlist':([36,88,],[51,100,]),'parameter':([36,88,],[53,53,]),'withoutputexpression':([50,],[81,]),'empty':([50,],[82,]),'withexpression':([50,],[83,]),'outputexpression':([50,83,],[84,94,]),'predexpressionlist':([85,106,],[95,115,]),'predexpression':([85,106,],[96,96,]),'predpath':([85,106,108,],[97,97,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statementlist","S'",1,None,None,None),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist','cslang.py',121),
  ('statementlist -> statement','statementlist',1,'p_statementlist','cslang.py',122),
  ('statement -> preamblestatement','statement',1,'p_statement','cslang.py',131),
  ('statement -> bodystatement','statement',1,'p_statement','cslang.py',132),
  ('preamblestatement -> typedefinition ;','preamblestatement',2,'p_preamblestatement','cslang.py',138),
  ('preamblestatement -> variantdefinition ;','preamblestatement',2,'p_preamblestatement','cslang.py',139),
  ('bodystatement -> dataword ;','bodystatement',2,'p_bodystatement','cslang.py',151),
  ('bodystatement -> registerassignment ;','bodystatement',2,'p_bodystatement','cslang.py',152),
  ('typeexpression -> IDENTIFIER : IDENTIFIER @ NUM_LITERAL','typeexpression',5,'p_typeexpression','cslang.py',166),
  ('typeexpression -> IDENTIFIER : IDENTIFIER @ RET','typeexpression',5,'p_typeexpression','cslang.py',167),
  ('typeexpressionlist -> typeexpression , typeexpressionlist','typeexpressionlist',3,'p_typeexpressionlist','cslang.py',174),
  ('typeexpressionlist -> typeexpression','typeexpressionlist',1,'p_typeexpressionlist','cslang.py',175),
  ('typedefinition -> EVENT IDENTIFIER { typeexpressionlist }','typedefinition',5,'p_typedefinition','cslang.py',185),
  ('variantdefinition -> EVENT IDENTIFIER variantlist','variantdefinition',3,'p_variantdefinition','cslang.py',190),
  ('variantlist -> variant | variantlist','variantlist',3,'p_variantlist','cslang.py',195),
  ('variantlist -> variant','variantlist',1,'p_variantlist','cslang.py',196),
  ('variant -> { IDENTIFIER typeexpressionlist }','variant',4,'p_variant','cslang.py',210),
  ('predpath -> IDENTIFIER . predpath','predpath',3,'p_predpath','cslang.py',215),
  ('predpath -> IDENTIFIER','predpath',1,'p_predpath','cslang.py',216),
  ('predexpressionlist -> predexpression AND predexpressionlist','predexpressionlist',3,'p_predexpressionlist','cslang.py',226),
  ('predexpressionlist -> predexpression','predexpressionlist',1,'p_predexpressionlist','cslang.py',227),
  ('predexpression -> predpath EQUALSOP NUM_LITERAL','predexpression',3,'p_predexpression','cslang.py',237),
  ('predexpression -> predpath EQUALSOP STRING_LITERAL','predexpression',3,'p_predexpression','cslang.py',238),
  ('registerassignment -> IDENTIFIER ASSIGNOP NUM_LITERAL','registerassignment',3,'p_registerassignment','cslang.py',245),
  ('registerassignment -> IDENTIFIER ASSIGNOP STRING_LITERAL','registerassignment',3,'p_registerassignment','cslang.py',246),
  ('registerassignment -> IDENTIFIER ASSIGNOP IDENTIFIER','registerassignment',3,'p_registerassignment','cslang.py',247),
  ('registerassignment -> IDENTIFIER ASSIGNOP registerexp','registerassignment',3,'p_registerassignment','cslang.py',248),
  ('registerexp -> registeradd','registerexp',1,'p_registerexp','cslang.py',255),
  ('registerexp -> registersub','registerexp',1,'p_registerexp','cslang.py',256),
  ('registerexp -> registermul','registerexp',1,'p_registerexp','cslang.py',257),
  ('registerexp -> registerdiv','registerexp',1,'p_registerexp','cslang.py',258),
  ('registerexp -> registerconcat','registerexp',1,'p_registerexp','cslang.py',259),
  ('registerexp -> registeraddorconcat','registerexp',1,'p_registerexp','cslang.py',260),
  ('registeraddorconcat -> IDENTIFIER + IDENTIFIER','registeraddorconcat',3,'p_registeraddorconcat','cslang.py',267),
  ('registerconcat -> IDENTIFIER + STRING_LITERAL','registerconcat',3,'p_registerconcat','cslang.py',273),
  ('registerconcat -> STRING_LITERAL + IDENTIFIER','registerconcat',3,'p_registerconcat','cslang.py',274),
  ('registerconcat -> STRING_LITERAL + STRING_LITERAL','registerconcat',3,'p_registerconcat','cslang.py',275),
  ('registeradd -> IDENTIFIER + NUM_LITERAL','registeradd',3,'p_registeradd','cslang.py',282),
  ('registeradd -> NUM_LITERAL + IDENTIFIER','registeradd',3,'p_registeradd','cslang.py',283),
  ('registeradd -> NUM_LITERAL + NUM_LITERAL','registeradd',3,'p_registeradd','cslang.py',284),
  ('registersub -> IDENTIFIER - IDENTIFIER','registersub',3,'p_registersub','cslang.py',291),
  ('registersub -> IDENTIFIER - NUM_LITERAL','registersub',3,'p_registersub','cslang.py',292),
  ('registersub -> NUM_LITERAL - IDENTIFIER','registersub',3,'p_registersub','cslang.py',293),
  ('registersub -> NUM_LITERAL - NUM_LITERAL','registersub',3,'p_registersub','cslang.py',294),
  ('registermul -> IDENTIFIER * IDENTIFIER','registermul',3,'p_registermul','cslang.py',301),
  ('registermul -> IDENTIFIER * NUM_LITERAL','registermul',3,'p_registermul','cslang.py',302),
  ('registermul -> NUM_LITERAL * IDENTIFIER','registermul',3,'p_registermul','cslang.py',303),
  ('registermul -> NUM_LITERAL * NUM_LITERAL','registermul',3,'p_registermul','cslang.py',304),
  ('registerdiv -> IDENTIFIER / IDENTIFIER','registerdiv',3,'p_registerdiv','cslang.py',311),
  ('registerdiv -> IDENTIFIER / NUM_LITERAL','registerdiv',3,'p_registerdiv','cslang.py',312),
  ('registerdiv -> NUM_LITERAL / IDENTIFIER','registerdiv',3,'p_registerdiv','cslang.py',313),
  ('registerdiv -> NUM_LITERAL / NUM_LITERAL','registerdiv',3,'p_registerdiv','cslang.py',314),
  ('empty -> <empty>','empty',0,'p_empty','cslang.py',320),
  ('withexpression -> WITH predexpressionlist','withexpression',2,'p_withexpression','cslang.py',325),
  ('outputexpression -> WRITEOP IDENTIFIER ( parameterexpression )','outputexpression',5,'p_outputexpression','cslang.py',330),
  ('withoutputexpression -> empty','withoutputexpression',1,'p_withoutputexpression','cslang.py',335),
  ('withoutputexpression -> withexpression','withoutputexpression',1,'p_withoutputexpression','cslang.py',336),
  ('withoutputexpression -> outputexpression','withoutputexpression',1,'p_withoutputexpression','cslang.py',337),
  ('withoutputexpression -> withexpression outputexpression','withoutputexpression',2,'p_withoutputexpression','cslang.py',338),
  ('datawordidentifier -> NOT IDENTIFIER','datawordidentifier',2,'p_datawordidentifier','cslang.py',354),
  ('datawordidentifier -> IDENTIFIER','datawordidentifier',1,'p_datawordidentifier','cslang.py',355),
  ('dataword -> datawordidentifier ( parameterexpression ) withoutputexpression','dataword',5,'p_dataword','cslang.py',364),
  ('parameterexpression -> { parameterlist }','parameterexpression',3,'p_parameterexpression','cslang.py',377),
  ('parameterexpression -> { }','parameterexpression',2,'p_parameterexpression','cslang.py',378),
  ('parameterlist -> parameter , parameterlist','parameterlist',3,'p_parameterlist','cslang.py',387),
  ('parameterlist -> parameter','parameterlist',1,'p_parameterlist','cslang.py',388),
  ('parameter -> IDENTIFIER : READOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',398),
  ('parameter -> IDENTIFIER : STOREOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',399),
  ('parameter -> IDENTIFIER : WRITEOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',400),
  ('parameter -> IDENTIFIER : parameterexpression','parameter',3,'p_parameter','cslang.py',401),
]
