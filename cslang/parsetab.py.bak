
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNOPleft+-left*/AND ASSIGNOP EQUALSOP IDENTIFIER NOT NUM_LITERAL READOP RET STOREOP STRING_LITERAL TYPE WITH WRITEOP statementlist : statement  statementlist\n                    | statement\n   statement : preamblestatement\n                | bodystatement\n   preamblestatement : typedefinition \';\'\n   bodystatement : dataword \';\'\n                    | registerassignment \';\'\n   typeexpression :  IDENTIFIER \':\' IDENTIFIER \'@\' NUM_LITERAL\n                     |  IDENTIFIER \':\' IDENTIFIER \'@\' RET\n   typeexpressionlist : typeexpression \',\' typeexpressionlist\n                         | typeexpression\n   typedefinition : TYPE IDENTIFIER \'{\' typeexpressionlist \'}\'\n\n   predpath : IDENTIFIER "." predpath\n               | IDENTIFIER\n   predexpressionlist : predexpression AND predexpressionlist\n                         | predexpression\n   predexpression : predpath EQUALSOP NUM_LITERAL\n                     | predpath EQUALSOP STRING_LITERAL\n   registerassignment : IDENTIFIER ASSIGNOP NUM_LITERAL\n                         | IDENTIFIER ASSIGNOP STRING_LITERAL\n                         | IDENTIFIER ASSIGNOP IDENTIFIER\n                         | IDENTIFIER ASSIGNOP registerexp\n   registerexp : registeradd\n                  | registersub\n                  | registermul\n                  | registerdiv\n                  | registerconcat\n                  | registeraddorconcat\n   registeraddorconcat : IDENTIFIER \'+\' IDENTIFIER\n   registerconcat : IDENTIFIER \'+\' STRING_LITERAL\n                     | STRING_LITERAL \'+\' IDENTIFIER\n                     | STRING_LITERAL \'+\' STRING_LITERAL\n   registeradd : IDENTIFIER \'+\' NUM_LITERAL\n                  | NUM_LITERAL \'+\' IDENTIFIER\n                  | NUM_LITERAL \'+\' NUM_LITERAL\n   registersub : IDENTIFIER \'-\' IDENTIFIER\n                  | IDENTIFIER \'-\' NUM_LITERAL\n                  | NUM_LITERAL \'-\' IDENTIFIER\n                  | NUM_LITERAL \'-\' NUM_LITERAL\n   registermul : IDENTIFIER \'*\' IDENTIFIER\n                  | IDENTIFIER \'*\' NUM_LITERAL\n                  | NUM_LITERAL \'*\' IDENTIFIER\n                  | NUM_LITERAL \'*\' NUM_LITERAL\n   registerdiv : IDENTIFIER \'/\' IDENTIFIER\n                  | IDENTIFIER \'/\' NUM_LITERAL\n                  | NUM_LITERAL \'/\' IDENTIFIER\n                  | NUM_LITERAL \'/\' NUM_LITERAL\n  empty : withexpression : WITH predexpressionlist\n   outputexpression : WRITEOP IDENTIFIER \'(\' parameterexpression \')\'\n   withoutputexpression : empty\n                           | withexpression\n                           | outputexpression\n                           | withexpression outputexpression\n   datawordidentifier : NOT IDENTIFIER\n                         | IDENTIFIER\n   dataword : datawordidentifier \'(\' parameterexpression \')\' withoutputexpression\n   parameterexpression : \'{\' parameterlist \'}\'\n                          | \'{\' \'}\'\n  parameterlist : parameter \',\' parameterlist\n                   | parameter\n  parameter : IDENTIFIER \':\' READOP IDENTIFIER\n               | IDENTIFIER \':\' STOREOP  IDENTIFIER\n               | IDENTIFIER \':\' WRITEOP IDENTIFIER\n               | IDENTIFIER \':\' parameterexpression\n  '
    
_lr_action_items = {'NOT':([0,4,8,10,13,14,19,],[1,-4,-3,1,-5,-6,-7,]),'WRITEOP':([36,55,60,85,86,105,107,108,],[56,56,89,-49,-16,-15,-17,-18,]),'STOREOP':([60,],[91,]),'ASSIGNOP':([9,],[17,]),'STRING_LITERAL':([17,46,49,98,],[32,74,80,108,]),':':([33,39,],[50,60,]),';':([3,5,11,23,24,25,26,27,28,29,30,31,32,36,51,53,54,55,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,85,86,105,107,108,109,],[13,14,19,-23,-26,-19,-28,-22,-27,-24,-21,-25,-20,-48,-12,-57,-51,-52,-53,-43,-42,-35,-34,-47,-46,-39,-38,-40,-41,-29,-33,-30,-44,-45,-36,-37,-31,-32,-54,-49,-16,-15,-17,-18,-50,]),'*':([25,30,],[41,45,]),'+':([25,30,32,],[42,46,49,]),'(':([7,9,12,84,],[16,-56,-55,95,]),')':([21,38,59,104,],[36,-59,-58,109,]),'.':([87,],[97,]),'/':([25,30,],[43,47,]),',':([35,38,40,59,92,99,100,101,102,103,],[52,-59,61,-58,-65,-64,-62,-63,-8,-9,]),'-':([25,30,],[44,48,]),'READOP':([60,],[90,]),'$end':([2,4,8,10,13,14,18,19,],[0,-4,-3,-2,-5,-6,-1,-7,]),'@':([81,],[94,]),'TYPE':([0,4,8,10,13,14,19,],[6,-4,-3,6,-5,-6,-7,]),'EQUALSOP':([87,88,106,],[-14,98,-13,]),'NUM_LITERAL':([17,41,42,43,44,45,46,47,48,94,98,],[25,62,64,66,68,71,73,76,78,102,107,]),'{':([15,16,60,95,],[20,22,22,22,]),'}':([22,34,35,37,38,40,59,82,92,93,99,100,101,102,103,],[38,51,-11,59,-59,-61,-58,-10,-65,-60,-64,-62,-63,-8,-9,]),'IDENTIFIER':([0,1,4,6,8,10,13,14,17,19,20,22,41,42,43,44,45,46,47,48,49,50,52,56,58,61,89,90,91,96,97,],[9,12,-4,15,-3,9,-5,-6,30,-7,33,39,63,65,67,69,70,72,75,77,79,81,33,84,87,39,99,100,101,87,87,]),'AND':([86,107,108,],[96,-17,-18,]),'RET':([94,],[103,]),'WITH':([36,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'registeradd':([17,],[23,]),'typeexpressionlist':([20,52,],[34,82,]),'statementlist':([0,10,],[2,18,]),'parameterexpression':([16,60,95,],[21,92,104,]),'parameterlist':([22,61,],[37,93,]),'predexpressionlist':([58,96,],[85,105,]),'registersub':([17,],[29,]),'predpath':([58,96,97,],[88,88,106,]),'withexpression':([36,],[55,]),'typedefinition':([0,10,],[3,3,]),'parameter':([22,61,],[40,40,]),'dataword':([0,10,],[5,5,]),'withoutputexpression':([36,],[53,]),'bodystatement':([0,10,],[4,4,]),'registeraddorconcat':([17,],[26,]),'registerexp':([17,],[27,]),'registerconcat':([17,],[28,]),'datawordidentifier':([0,10,],[7,7,]),'preamblestatement':([0,10,],[8,8,]),'registerdiv':([17,],[24,]),'empty':([36,],[54,]),'predexpression':([58,96,],[86,86,]),'statement':([0,10,],[10,10,]),'registermul':([17,],[31,]),'outputexpression':([36,55,],[57,83,]),'registerassignment':([0,10,],[11,11,]),'typeexpression':([20,52,],[35,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statementlist","S'",1,None,None,None),
  ('statementlist -> statement statementlist','statementlist',2,'p_statementlist','cslang.py',112),
  ('statementlist -> statement','statementlist',1,'p_statementlist','cslang.py',113),
  ('statement -> preamblestatement','statement',1,'p_statement','cslang.py',121),
  ('statement -> bodystatement','statement',1,'p_statement','cslang.py',122),
  ('preamblestatement -> typedefinition ;','preamblestatement',2,'p_preamblestatement','cslang.py',127),
  ('bodystatement -> dataword ;','bodystatement',2,'p_bodystatement','cslang.py',136),
  ('bodystatement -> registerassignment ;','bodystatement',2,'p_bodystatement','cslang.py',137),
  ('typeexpression -> IDENTIFIER : IDENTIFIER @ NUM_LITERAL','typeexpression',5,'p_typeexpression','cslang.py',151),
  ('typeexpression -> IDENTIFIER : IDENTIFIER @ RET','typeexpression',5,'p_typeexpression','cslang.py',152),
  ('typeexpressionlist -> typeexpression , typeexpressionlist','typeexpressionlist',3,'p_typeexpressionlist','cslang.py',159),
  ('typeexpressionlist -> typeexpression','typeexpressionlist',1,'p_typeexpressionlist','cslang.py',160),
  ('typedefinition -> TYPE IDENTIFIER { typeexpressionlist }','typedefinition',5,'p_typedefinition','cslang.py',170),
  ('predpath -> IDENTIFIER . predpath','predpath',3,'p_predpath','cslang.py',178),
  ('predpath -> IDENTIFIER','predpath',1,'p_predpath','cslang.py',179),
  ('predexpressionlist -> predexpression AND predexpressionlist','predexpressionlist',3,'p_predexpressionlist','cslang.py',189),
  ('predexpressionlist -> predexpression','predexpressionlist',1,'p_predexpressionlist','cslang.py',190),
  ('predexpression -> predpath EQUALSOP NUM_LITERAL','predexpression',3,'p_predexpression','cslang.py',201),
  ('predexpression -> predpath EQUALSOP STRING_LITERAL','predexpression',3,'p_predexpression','cslang.py',202),
  ('registerassignment -> IDENTIFIER ASSIGNOP NUM_LITERAL','registerassignment',3,'p_registerassignment','cslang.py',211),
  ('registerassignment -> IDENTIFIER ASSIGNOP STRING_LITERAL','registerassignment',3,'p_registerassignment','cslang.py',212),
  ('registerassignment -> IDENTIFIER ASSIGNOP IDENTIFIER','registerassignment',3,'p_registerassignment','cslang.py',213),
  ('registerassignment -> IDENTIFIER ASSIGNOP registerexp','registerassignment',3,'p_registerassignment','cslang.py',214),
  ('registerexp -> registeradd','registerexp',1,'p_registerexp','cslang.py',220),
  ('registerexp -> registersub','registerexp',1,'p_registerexp','cslang.py',221),
  ('registerexp -> registermul','registerexp',1,'p_registerexp','cslang.py',222),
  ('registerexp -> registerdiv','registerexp',1,'p_registerexp','cslang.py',223),
  ('registerexp -> registerconcat','registerexp',1,'p_registerexp','cslang.py',224),
  ('registerexp -> registeraddorconcat','registerexp',1,'p_registerexp','cslang.py',225),
  ('registeraddorconcat -> IDENTIFIER + IDENTIFIER','registeraddorconcat',3,'p_registeraddorconcat','cslang.py',231),
  ('registerconcat -> IDENTIFIER + STRING_LITERAL','registerconcat',3,'p_registerconcat','cslang.py',238),
  ('registerconcat -> STRING_LITERAL + IDENTIFIER','registerconcat',3,'p_registerconcat','cslang.py',239),
  ('registerconcat -> STRING_LITERAL + STRING_LITERAL','registerconcat',3,'p_registerconcat','cslang.py',240),
  ('registeradd -> IDENTIFIER + NUM_LITERAL','registeradd',3,'p_registeradd','cslang.py',247),
  ('registeradd -> NUM_LITERAL + IDENTIFIER','registeradd',3,'p_registeradd','cslang.py',248),
  ('registeradd -> NUM_LITERAL + NUM_LITERAL','registeradd',3,'p_registeradd','cslang.py',249),
  ('registersub -> IDENTIFIER - IDENTIFIER','registersub',3,'p_registersub','cslang.py',256),
  ('registersub -> IDENTIFIER - NUM_LITERAL','registersub',3,'p_registersub','cslang.py',257),
  ('registersub -> NUM_LITERAL - IDENTIFIER','registersub',3,'p_registersub','cslang.py',258),
  ('registersub -> NUM_LITERAL - NUM_LITERAL','registersub',3,'p_registersub','cslang.py',259),
  ('registermul -> IDENTIFIER * IDENTIFIER','registermul',3,'p_registermul','cslang.py',266),
  ('registermul -> IDENTIFIER * NUM_LITERAL','registermul',3,'p_registermul','cslang.py',267),
  ('registermul -> NUM_LITERAL * IDENTIFIER','registermul',3,'p_registermul','cslang.py',268),
  ('registermul -> NUM_LITERAL * NUM_LITERAL','registermul',3,'p_registermul','cslang.py',269),
  ('registerdiv -> IDENTIFIER / IDENTIFIER','registerdiv',3,'p_registerdiv','cslang.py',276),
  ('registerdiv -> IDENTIFIER / NUM_LITERAL','registerdiv',3,'p_registerdiv','cslang.py',277),
  ('registerdiv -> NUM_LITERAL / IDENTIFIER','registerdiv',3,'p_registerdiv','cslang.py',278),
  ('registerdiv -> NUM_LITERAL / NUM_LITERAL','registerdiv',3,'p_registerdiv','cslang.py',279),
  ('empty -> <empty>','empty',0,'p_empty','cslang.py',284),
  ('withexpression -> WITH predexpressionlist','withexpression',2,'p_withexpression','cslang.py',288),
  ('outputexpression -> WRITEOP IDENTIFIER ( parameterexpression )','outputexpression',5,'p_outputexpression','cslang.py',294),
  ('withoutputexpression -> empty','withoutputexpression',1,'p_withoutputexpression','cslang.py',299),
  ('withoutputexpression -> withexpression','withoutputexpression',1,'p_withoutputexpression','cslang.py',300),
  ('withoutputexpression -> outputexpression','withoutputexpression',1,'p_withoutputexpression','cslang.py',301),
  ('withoutputexpression -> withexpression outputexpression','withoutputexpression',2,'p_withoutputexpression','cslang.py',302),
  ('datawordidentifier -> NOT IDENTIFIER','datawordidentifier',2,'p_datawordidentifier','cslang.py',318),
  ('datawordidentifier -> IDENTIFIER','datawordidentifier',1,'p_datawordidentifier','cslang.py',319),
  ('dataword -> datawordidentifier ( parameterexpression ) withoutputexpression','dataword',5,'p_dataword','cslang.py',328),
  ('parameterexpression -> { parameterlist }','parameterexpression',3,'p_parameterexpression','cslang.py',342),
  ('parameterexpression -> { }','parameterexpression',2,'p_parameterexpression','cslang.py',343),
  ('parameterlist -> parameter , parameterlist','parameterlist',3,'p_parameterlist','cslang.py',353),
  ('parameterlist -> parameter','parameterlist',1,'p_parameterlist','cslang.py',354),
  ('parameter -> IDENTIFIER : READOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',365),
  ('parameter -> IDENTIFIER : STOREOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',366),
  ('parameter -> IDENTIFIER : WRITEOP IDENTIFIER','parameter',4,'p_parameter','cslang.py',367),
  ('parameter -> IDENTIFIER : parameterexpression','parameter',3,'p_parameter','cslang.py',368),
]
